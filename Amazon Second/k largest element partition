okay thanks for your explain, i guess i had a general idea what this problem is doing
can i just restate the problem for you to make sure i understand evey requirements correctly for this problem

if you have some questions and some suggestions, please interrupt me directly and tell me what you are thinking.
Do I need to explain this code in detail?
Do I make myself clear or do i miss some thing?

1.input [3,4,1,2,6],k=3 output should be [6,4,3]
2.what if the input array is None return []
3.waht if the k < len(array) return []
4.do we need to return a sorted array can i just return [3,4,6]

way1:
1.simple way is to call the sort function in python, then return the first k elements of this sorted array nlog(n)
way2:
I want to sort this array form small to large then the what I need to return is array[n-k:]
it will be easier for me to think
using two pointers left = start right = end
[3,4,1,2,6] left = 3, right = 6, pivot = array[left]it can be any number in the array
compare these two pointers separately to the pivot
    [3,4,1,2,6] pivot = 3
     l     r
    [2,4,1,3,6]
       l r
    [2,1,4,3,6]
       r l       we jump out of the while loop, so the element after l will greater than pivot and the element before r will less than pivot
while left <= right:
     while left<=right and array[left] < pivot: left+=1    we can't use <= here because assume [1,1,1,1] the left will go to the end of array
     while left<=right and array[right] > pivot: right-=1
     if left<right #交换前一点要判断left<right,递归一定要写出口
     array[left],array[right]=array[right],array[left]
     left+=1
     right-=1

if k<=right helper(nums,start,right)
than we just need to do the same operation for [start:r]and [l:end]
finally we will get the sorted array



